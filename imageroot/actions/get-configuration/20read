import sys
import json
import agent
from agent.ldapproxy import Ldapproxy

# Prepare return variable
config = {}

# Read current configuration from the environment file
config["host"] = os.getenv("TRAEFIK_HOST","")
config["lets_encrypt"] = os.getenv("TRAEFIK_LETS_ENCRYPT") == "True"
config["mysql_root_password"] = os.getenv("MYSQL_ROOT_PASSWORD", "Nethesis,1234") # the value is the Mail module UUID!
config["mysql_password"] = os.getenv("MYSQL_PASSWORD", "Nethesis,1234") # the value is the mail domain of user to force domain identity : user@domain.com !
config["mysql_database"] = os.getenv("MYSQL_DATABASE", "matomo")
config["mysql_user"] = os.getenv("MYSQL_USER", "matomo")
config["matomo_database_username"] = os.getenv("MATOMO_DATABASE_USERNAME", "matomo")
config["matomo_database_password"] = os.getenv("MATOMO_DATABASE_PASSWORD","Nethesis,1234")
config["matomo_database_dbname"] = os.getenv("MATOMO_DATABASE_DBNAME","matomo")
config["mariadb_auto_upgrade"] = os.getenv("MARIADB_AUTO_UPGRADE") == "1"
config["mariadb_disable_upgrade_backup"] = os.getenv("MARIADB_DISABLE_UPGRADE_BACKUP") == "1"
config["matomo_database_tables_prefix"] = os.getenv("MARIADB_AUTO_UPGRADE") == "1"
config["matomo_database_adapter"] = os.getenv("MARIADB_DISABLE_UPGRADE_BACKUP") == "1"

rdb = agent.redis_connect() # full read-only access on every key

modules=[]
tmp = []
# we query about all mail server to use it inside the user interface
for key in agent.list_service_providers(rdb,'imap','tcp'):
    mail = key['module_id']
    get_retval = agent.tasks.run(f"module/{mail}",'list-domains')
    for kd in get_retval['output']:
        if kd['addusers']:
            obj = {
                "name": key['module_id'],
                "label": f"{kd['domain']} ({key['mail_hostname']})",
                "value": key['module_uuid']+','+kd['domain'],
            }
            modules.append(obj)

# use it inside a dropdown
config['mail_server_URL'] = modules

# retrieve LDAP domains list
lp = Ldapproxy()
domains = []
for key in lp.get_domains_list():
    domains.append({
        "name": key,
        "label": key,
        "value": key,
    })

config['user_domains_list'] = domains


# Dump the configuration to stdout
json.dump(config, fp=sys.stdout)